// Sistema de √°udio usando Web Audio API e arquivos MP3
class AudioManager {
    constructor() {
        this.audioContext = null;
        this.musicInterval = null;
        this.soundEnabled = true;
        this.currentAudio = null;
        this.musicFiles = {
            hogwarts: new Audio('./assets/audio/hogwarts.mp3'),
            centralperk: new Audio('./assets/audio/centralperk.mp3')
        };
        this.audioInitialized = false;
        this.initAudioContext();
        this.setupMusicFiles();
    }

    initAudioContext() {
        try {
            this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
        } catch (e) {
            console.log('Web Audio API n√£o suportado');
        }
    }
    
    setupMusicFiles() {
        // Configurar arquivos de m√∫sica
        Object.values(this.musicFiles).forEach(audio => {
            audio.loop = true;
            audio.volume = 0.4; // Volume um pouco mais alto
            audio.preload = 'auto';
            
            // Remover crossOrigin para arquivos locais
            // audio.crossOrigin = 'anonymous';
        });
        
        // Event listeners para debug
        this.musicFiles.hogwarts.addEventListener('canplaythrough', () => {
            console.log('‚úÖ Hogwarts MP3 ready to play');
        });
        this.musicFiles.centralperk.addEventListener('canplaythrough', () => {
            console.log('‚úÖ Central Perk MP3 ready to play');
        });
        
        this.musicFiles.hogwarts.addEventListener('loadstart', () => {
            console.log('üîÑ Iniciando carregamento Hogwarts MP3');
        });
        this.musicFiles.centralperk.addEventListener('loadstart', () => {
            console.log('üîÑ Iniciando carregamento Central Perk MP3');
        });
        
        // Listeners de load success
        this.musicFiles.hogwarts.addEventListener('loadeddata', () => {
            console.log('üì± Dados do Hogwarts MP3 carregados');
        });
        this.musicFiles.centralperk.addEventListener('loadeddata', () => {
            console.log('üì± Dados do Central Perk MP3 carregados');
        });
        
        // Lidar com erros
        this.musicFiles.hogwarts.addEventListener('error', (e) => {
            console.log('‚ùå Erro ao carregar Hogwarts MP3:', e);
            console.log('‚ùå Arquivo n√£o encontrado ou inacess√≠vel: assets/audio/hogwarts.mp3');
        });
        this.musicFiles.centralperk.addEventListener('error', (e) => {
            console.log('‚ùå Erro ao carregar Central Perk MP3:', e);
            console.log('‚ùå Arquivo n√£o encontrado ou inacess√≠vel: assets/audio/centralperk.mp3');
        });
        
        // Testar se arquivos existem
        console.log('üéµ Testando arquivos MP3:');
        console.log('üìÅ Hogwarts:', this.musicFiles.hogwarts.src);
        console.log('üìÅ Central Perk:', this.musicFiles.centralperk.src);
        
        // Tentar carregar imediatamente
        setTimeout(() => {
            this.musicFiles.hogwarts.load();
            this.musicFiles.centralperk.load();
        }, 100);
    }

    createTone(frequency, duration, type = 'sine') {
        if (!this.audioContext || !this.soundEnabled) return;
        
        const oscillator = this.audioContext.createOscillator();
        const gainNode = this.audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(this.audioContext.destination);
        
        oscillator.frequency.setValueAtTime(frequency, this.audioContext.currentTime);
        oscillator.type = type;
        
        gainNode.gain.setValueAtTime(0.1, this.audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + duration);
        
        oscillator.start(this.audioContext.currentTime);
        oscillator.stop(this.audioContext.currentTime + duration);
    }

    playMoveSound() {
        if (this.soundEnabled) this.createTone(200, 0.1, 'square');
    }

    playInteractSound() {
        if (this.soundEnabled) this.createTone(400, 0.2, 'sine');
    }

    playCorrectSound() {
        if (!this.soundEnabled) return;
        this.createTone(523, 0.3, 'sine'); // C5
        setTimeout(() => this.createTone(659, 0.3, 'sine'), 100); // E5
        setTimeout(() => this.createTone(784, 0.4, 'sine'), 200); // G5
    }

    playWrongSound() {
        if (this.soundEnabled) this.createTone(200, 0.5, 'sawtooth');
    }

    playFireworksSound() {
        if (!this.soundEnabled) return;
        for(let i = 0; i < 5; i++) {
            setTimeout(() => {
                this.createTone(800 + Math.random() * 400, 0.3, 'square');
            }, i * 200);
        }
    }

    stopBackgroundMusic() {
        // Parar m√∫sica sint√©tica
        if (this.musicInterval) {
            clearInterval(this.musicInterval);
            this.musicInterval = null;
        }
        
        // Parar m√∫sica MP3
        if (this.currentAudio) {
            this.currentAudio.pause();
            this.currentAudio.currentTime = 0;
            this.currentAudio = null;
        }
    }    playBackgroundMusic(currentScreen, currentLevel) {
        if (!this.soundEnabled) {
            console.log('üîá Som desabilitado, n√£o tocando m√∫sica');
            return;
        }
        
        console.log(`üéµ Tentando tocar m√∫sica para screen: ${currentScreen}, level: ${currentLevel}`);
        
        // Parar m√∫sica anterior sempre
        this.stopBackgroundMusic();
        
        let melody, tempo, audioFile;
        
        // Selecionar melodia baseada no local atual
        if (currentScreen === 'level') {
            switch(currentLevel) {
                case 0: // Hogwarts - Usar arquivo MP3
                    console.log('üè∞ LEVEL 0 - Selecionando m√∫sica de Hogwarts');
                    audioFile = this.musicFiles.hogwarts;
                    console.log('üé∂ Arquivo selecionado:', audioFile ? audioFile.src : 'UNDEFINED');
                    
                    // For√ßar reprodu√ß√£o imediata sem aguardar carregamento completo
                    if (audioFile) {
                        this.forcePlayMP3(audioFile, 'Hogwarts');
                        return; // Sair da fun√ß√£o, n√£o usar fallback
                    }
                    break;
                case 1: // Central Perk - Usar arquivo MP3
                    console.log('‚òï LEVEL 1 - Selecionando m√∫sica de Central Perk');
                    audioFile = this.musicFiles.centralperk;
                    console.log('üé∂ Arquivo selecionado:', audioFile ? audioFile.src : 'UNDEFINED');
                    
                    // For√ßar reprodu√ß√£o imediata sem aguardar carregamento completo
                    if (audioFile) {
                        this.forcePlayMP3(audioFile, 'Central Perk');
                        return; // Sair da fun√ß√£o, n√£o usar fallback
                    }
                    break;
                case 2: // Caminho para o Forte - Tema aventura √©pica (sint√©tico)
                    console.log('‚öîÔ∏è LEVEL 2 - Tocando m√∫sica do Forte');
                    melody = [440, 523, 659, 784, 698, 659, 523, 587, 659, 440];
                    tempo = 600;
                    break;
                case 3: // Forte - Tema rom√¢ntico e √©pico (sint√©tico)
                    console.log('üè∞ LEVEL 3 - Tocando m√∫sica do Forte Final');
                    melody = [523, 659, 784, 880, 1047, 880, 784, 659, 698, 523];
                    tempo = 1000;
                    break;
                default:
                    console.log(`üéµ LEVEL ${currentLevel} - Tocando m√∫sica padr√£o`);
                    melody = [523, 587, 659, 698, 784, 698, 659, 587];
                    tempo = 600;
            }
        } else {
            // M√∫sica do mapa principal - tema de vila m√°gica (sint√©tico)
            console.log(`üó∫Ô∏è SCREEN ${currentScreen} - Tocando m√∫sica do mapa principal`);
            melody = [523, 587, 659, 698, 784, 698, 659, 587, 523, 659];
            tempo = 700;
        }            // Tocar m√∫sica sint√©tica se n√£o h√° arquivo ou se √© outro n√≠vel
        if (melody && tempo) {
            this.playSyntheticMusic(melody, tempo, currentScreen);
        }
    }

    forcePlayMP3(audioFile, musicName) {
        console.log(`üöÄ FOR√áA REPRODU√á√ÉO: ${musicName} - ${audioFile.src}`);
        
        this.currentAudio = audioFile;
        audioFile.currentTime = 0;
        audioFile.volume = 0.5;
        audioFile.muted = false;
        audioFile.loop = true;
        
        // M√∫ltiplas tentativas de reprodu√ß√£o
        const attemptPlay = (attempt = 1) => {
            console.log(`üéØ Tentativa ${attempt} de reproduzir ${musicName}`);
            
            const playPromise = audioFile.play();
            
            if (playPromise !== undefined) {
                playPromise
                    .then(() => {
                        console.log(`‚úÖ ${musicName} TOCANDO COM SUCESSO na tentativa ${attempt}!`);
                    })
                    .catch(error => {
                        console.log(`‚ùå Tentativa ${attempt} falhou:`, error.name, error.message);
                        
                        if (attempt < 3) {
                            // Aguardar um pouco e tentar novamente
                            setTimeout(() => attemptPlay(attempt + 1), 500);
                        } else {
                            console.log(`üí• Todas as tentativas falharam para ${musicName}, usando fallback`);
                            this.playFallbackMusicForLevel(musicName);
                        }
                    });
            } else {
                console.log(`‚ùå Play() n√£o retornou Promise para ${musicName}`);
                if (attempt < 3) {
                    setTimeout(() => attemptPlay(attempt + 1), 300);
                } else {
                    this.playFallbackMusicForLevel(musicName);
                }
            }
        };
        
        // Iniciar primeira tentativa
        attemptPlay();
    }

    playFallbackMusicForLevel(musicName) {
        console.log(`üîÑ Reproduzindo fallback sint√©tico para ${musicName}`);
        
        let melody, tempo;
        
        if (musicName === 'Hogwarts') {
            melody = [523, 659, 784, 659, 698, 784, 880, 784, 659, 523];
            tempo = 900;
        } else if (musicName === 'Central Perk') {
            melody = [523, 587, 659, 698, 659, 587, 523, 659, 698, 784];
            tempo = 500;
        } else {
            return;
        }
        
        this.playSyntheticMusic(melody, tempo, 'level');
    }tryPlayAudio(audioFile, currentLevel) {
        console.log(`üé∂ Tentando tocar: ${audioFile.src}`);
        
        // For√ßar configura√ß√µes
        audioFile.volume = 0.5;
        audioFile.muted = false;
        audioFile.currentTime = 0;
        
        const playPromise = audioFile.play();
        
        if (playPromise !== undefined) {
            playPromise
                .then(() => {
                    console.log(`‚úÖ M√∫sica ${audioFile.src} iniciada com sucesso!`);
                })
                .catch(e => {
                    console.log('‚ùå Erro ao tocar m√∫sica:', e.name, e.message);
                    
                    if (e.name === 'NotAllowedError') {
                        console.log('üö´ Autoplay bloqueado. Tentando m√©todo alternativo...');
                        
                        // M√©todo alternativo: aguardar pr√≥xima intera√ß√£o
                        const tryAgainOnInteraction = () => {
                            document.addEventListener('click', () => {
                                console.log('üñ±Ô∏è Click detectado, tentando tocar novamente...');
                                const retryPromise = audioFile.play();
                                if (retryPromise) {
                                    retryPromise.then(() => {
                                        console.log(`‚úÖ M√∫sica ${audioFile.src} tocando ap√≥s click!`);
                                    }).catch(() => {
                                        console.log('‚ùå Ainda n√£o consegue tocar, usando fallback');
                                        this.playFallbackMusic(currentLevel);
                                    });
                                }
                            }, { once: true });
                        };
                        
                        tryAgainOnInteraction();
                        
                    } else if (e.name === 'NotSupportedError') {
                        console.log('üö´ Formato de √°udio n√£o suportado.');
                        this.playFallbackMusic(currentLevel);
                    } else {
                        console.log('üîÑ Tentando fallback para m√∫sica sint√©tica');
                        this.playFallbackMusic(currentLevel);
                    }
                });
        } else {
            console.log('‚ùå Play() n√£o retornou uma Promise');
            this.playFallbackMusic(currentLevel);
        }
    }

    playFallbackMusic(currentLevel) {
        let melody, tempo;
        
        switch(currentLevel) {
            case 0: // Hogwarts fallback
                melody = [523, 659, 784, 659, 698, 784, 880, 784, 659, 523];
                tempo = 900;
                break;
            case 1: // Central Perk fallback
                melody = [523, 587, 659, 698, 659, 587, 523, 659, 698, 784];
                tempo = 500;
                break;
            default:
                return;
        }
        
        this.playSyntheticMusic(melody, tempo, 'level');
    }

    playSyntheticMusic(melody, tempo, currentScreen) {
        if (!this.audioContext) return;
        
        let noteIndex = 0;
        
        const playNextNote = () => {
            if (this.soundEnabled && currentScreen !== 'start') {
                this.createTone(melody[noteIndex], 0.5, 'triangle');
                noteIndex = (noteIndex + 1) % melody.length;
            }
        };
        
        // Tocar primeira nota imediatamente
        playNextNote();
        
        // Configurar intervalo para pr√≥ximas notas
        this.musicInterval = setInterval(playNextNote, tempo);
    }

    toggleSound() {
        this.soundEnabled = !this.soundEnabled;
        if (!this.soundEnabled) {
            this.stopBackgroundMusic();
        }
        return this.soundEnabled;
    }

    setSoundEnabled(enabled) {
        this.soundEnabled = enabled;
        if (!enabled) {
            this.stopBackgroundMusic();
        } else {
            // Ajustar volume dos arquivos MP3
            Object.values(this.musicFiles).forEach(audio => {
                audio.volume = 0.3;
            });
        }    }
      resumeContext() {
        if (this.audioContext && this.audioContext.state === 'suspended') {
            this.audioContext.resume();
        }
    }    // M√©todo para inicializar √°udio ap√≥s primeira intera√ß√£o
    async initAudioAfterUserGesture() {
        try {
            console.log('üéØ Inicializando sistema de √°udio ap√≥s gesto do usu√°rio...');
            
            // Reactivar contexto de √°udio
            if (this.audioContext && this.audioContext.state === 'suspended') {
                await this.audioContext.resume();
                console.log('üîä Contexto de √°udio reativado');
            }
            
            // M√©todo mais agressivo de desbloqueio
            const forceUnlockAudio = async (audio, name) => {
                return new Promise((resolve) => {
                    // Resetar completamente o √°udio
                    audio.load();
                    audio.volume = 0.01; // Volume muito baixo
                    audio.currentTime = 0;
                    audio.muted = false;
                    
                    const unlockAttempt = audio.play();
                    if (unlockAttempt) {
                        unlockAttempt.then(() => {
                            console.log(`üîì ${name} - Primeiro play bem-sucedido (silencioso)`);
                            
                            // Parar imediatamente e resetar
                            setTimeout(() => {
                                audio.pause();
                                audio.currentTime = 0;
                                audio.volume = 0.5; // Volume normal
                                console.log(`‚úÖ ${name} - √Åudio desbloqueado e pronto!`);
                                resolve();
                            }, 100);
                        }).catch((error) => {
                            console.log(`‚ö†Ô∏è ${name} - Erro no desbloqueio:`, error.message);
                            resolve(); // Continuar mesmo com erro
                        });
                    } else {
                        console.log(`‚ö†Ô∏è ${name} - Play n√£o retornou Promise`);
                        resolve();
                    }
                });
            };
            
            // Tentar desbloquear ambos os arquivos
            await Promise.all([
                forceUnlockAudio(this.musicFiles.hogwarts, 'Hogwarts'),
                forceUnlockAudio(this.musicFiles.centralperk, 'Central Perk')
            ]);
            
            this.audioInitialized = true;
            console.log('üéµ Sistema de √°udio completamente inicializado e desbloqueado!');
            
        } catch (error) {
            console.log('‚ùå Erro ao inicializar √°udio:', error);
        }
    }
}

// Exportar para uso global
if (typeof module !== 'undefined' && module.exports) {
    module.exports = AudioManager;
} else {
    window.AudioManager = AudioManager;
}
